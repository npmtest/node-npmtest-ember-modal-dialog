{"/home/travis/build/npmtest/node-npmtest-ember-modal-dialog/test.js":"/* istanbul instrument in package npmtest_ember_modal_dialog */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-modal-dialog/lib.npmtest_ember_modal_dialog.js":"/* istanbul instrument in package npmtest_ember_modal_dialog */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ember_modal_dialog = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ember_modal_dialog = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-modal-dialog/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ember-modal-dialog && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ember_modal_dialog */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ember_modal_dialog\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ember_modal_dialog.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ember_modal_dialog.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ember_modal_dialog.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ember_modal_dialog.__dirname + '/lib.npmtest_ember_modal_dialog.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-modal-dialog/node_modules/ember-modal-dialog/index.js":"/* jshint node: true */\n'use strict';\nvar path = require('path');\nvar fs = require('fs');\n\nvar VersionChecker = require('ember-cli-version-checker');\n\nmodule.exports = {\n  name: 'ember-modal-dialog',\n\n  init: function() {\n    this._super.init && this._super.init.apply(this, arguments);\n    var checker = new VersionChecker(this);\n\n    if (!checker.forEmber().isAbove('0.2.6')) {\n      console.warn(\"Warning: ember-modal-dialog requires ember-cli >= 0.2.6 \"\n        + \"for support for the addon-templates tree, which allows \"\n        + \"us to support various ember versions. Use an older \"\n        + \"version of ember-modal-dialog if you are stuck on an \"\n        + \"older ember-cli.\");\n    }\n  },\n\n  treeForAddonTemplates: function treeForAddonTemplates (tree) {\n    var checker = new VersionChecker(this);\n    var emberVersion = checker.forEmber();\n\n    var baseTemplatesPath = path.join(this.root, 'addon/templates');\n\n    if (emberVersion.lt('1.13.0-beta.1')) {\n      return this.treeGenerator(path.join(baseTemplatesPath, 'lt-1-13'));\n    } else {\n      return this.treeGenerator(path.join(baseTemplatesPath, 'current'));\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-modal-dialog/node_modules/ember-modal-dialog/config/environment.js":"/*jshint node:true*/\n'use strict';\n\nmodule.exports = function(/* environment, appConfig */) {\n  return { };\n};\n","/home/travis/build/npmtest/node-npmtest-ember-modal-dialog/node_modules/ember-modal-dialog/addon/components/modal-dialog.js":"import Ember from 'ember';\nimport layout from '../templates/components/modal-dialog';\n\nconst { dasherize } = Ember.String;\nconst { $, computed, guidFor, inject } = Ember;\nconst { oneWay } = computed;\nconst isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);\nconst computedJoin = function(prop) {\n  return computed(prop, function() {\n    return this.get(prop).join(' ');\n  });\n};\n\nexport default Ember.Component.extend({\n  tagName: '',\n  layout,\n  modalService: inject.service('modal-dialog'),\n  destinationElementId: oneWay('modalService.destinationElementId'),\n\n  // container-class - set this from templates\n  containerClassNames: ['ember-modal-dialog'], // set this in a subclass definition\n  containerClassNamesString: computedJoin('containerClassNames'),\n\n  // 'overlay-class - set this from templates\n  overlayClassNames: ['ember-modal-overlay'], // set this in a subclass definition\n  overlayClassNamesString: computedJoin('overlayClassNames'),\n\n  // 'wrapper-class - set this from templates\n  wrapperClassNames: ['ember-modal-wrapper'], // set this in a subclass definition\n  wrapperClassNamesString: computedJoin('wrapperClassNames'),\n\n  concatenatedProperties: ['containerClassNames', 'overlayClassNames', 'wrapperClassNames'],\n\n  targetAttachmentClass: computed('targetAttachment', function() {\n    let targetAttachment = this.get('targetAttachment') || '';\n    // Convert tether-styled values like 'middle right' to 'right'\n    targetAttachment = targetAttachment.split(' ').slice(-1)[0];\n    return `ember-modal-dialog-target-attachment-${dasherize(targetAttachment)}`;\n  }),\n\n  target: 'body', // element, css selector, or view instance\n  targetAttachment: 'middle center',\n\n  translucentOverlay: false,\n  clickOutsideToClose: false,\n  renderInPlace: false,\n\n  makeOverlayClickableOnIOS: Ember.on('didInsertElement', function() {\n    if (isIOS) {\n      Ember.$('div[data-ember-modal-dialog-overlay]').css('cursor', 'pointer');\n    }\n  }),\n\n  didInsertElement() {\n    if (!this.get('clickOutsideToClose')) {\n      return;\n    }\n\n    const handleClick = (event) => {\n      if (!$(event.target).closest('.ember-modal-dialog').length) {\n        this.send('close');\n      }\n    };\n    const registerClick = () => $(document).on(`click.ember-modal-dialog-${guidFor(this)}`, handleClick);\n\n    // setTimeout needed or else the click handler will catch the click that spawned this modal dialog\n    setTimeout(registerClick);\n\n    if (isIOS) {\n      const registerTouch = () => $(document).on(`touchend.ember-modal-dialog-${guidFor(this)}`, handleClick);\n      setTimeout(registerTouch);\n    }\n    this._super(...arguments);\n  },\n  willDestroyElement() {\n    $(document).off(`click.ember-modal-dialog-${guidFor(this)}`);\n    if (isIOS) {\n      $(document).off(`touchend.ember-modal-dialog-${guidFor(this)}`);\n    }\n    this._super(...arguments);\n  },\n\n  actions: {\n    close() {\n      this.sendAction('close');\n    },\n    clickedOverlay() {\n      if (this.get('onClickOverlay')) {\n        this.sendAction('onClickOverlay');\n      } else {\n        this.sendAction('close');\n      }\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-modal-dialog/node_modules/ember-modal-dialog/addon/components/modal-dialog-overlay.js":"import Ember from 'ember';\n\nexport default Ember.Component.extend({\n  attributeBindings: ['data-ember-modal-dialog-overlay'],\n  'data-ember-modal-dialog-overlay': true,\n\n  // trigger only when clicking the overlay itself, not its children\n  click(event) {\n    if (event.target === this.get('element')) {\n      this.sendAction();\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-modal-dialog/node_modules/ember-modal-dialog/addon/components/positioned-container.js":"import Ember from 'ember';\n\nconst { computed, observer, on } = Ember;\nconst { capitalize } = Ember.String;\nconst SUPPORTED_TARGET_ATTACHMENTS = [\n  'top', 'right', 'bottom', 'left', 'center', 'elementCenter', 'none'\n];\n\nexport default Ember.Component.extend({\n\n  // target - element selector, element, or Ember View\n  // targetAttachment - top, right, bottom, left, center, or none\n  //   left, right, top, bottom (relative to target)\n  //   center (relative to container)\n  targetAttachment: 'center',\n\n  isPositioned: computed('targetAttachment', 'target', 'renderInPlace', function() {\n    if (this.get('renderInPlace')) {\n      return false;\n    }\n    if (this.get('target') && this.get('targetAttachment')) {\n      return true;\n    }\n    const targetAttachment = this.get('targetAttachment');\n    return targetAttachment === 'center' || targetAttachment === 'middle center';\n  }),\n\n  didGetPositioned: observer('isPositioned', on('didInsertElement', function() {\n    if (this._state !== 'inDOM') {\n      return;\n    }\n\n    if (this.get('isPositioned')) {\n      this.updateTargetAttachment();\n    } else {\n      this.$().css('left', '').css('top', '');\n    }\n  })),\n\n  getWrappedTargetAttachmentElement() {\n    const target = this.get('target');\n    if (!target) {\n      return null;\n    }\n\n    if (Ember.typeOf(target) === 'string') {\n      const targetSelector = target;\n      const wrappedElement = Ember.$(targetSelector).eq(0);\n      Ember.assert(`No element found for modal-dialog's target selector '${targetSelector}'.`, wrappedElement);\n      return wrappedElement;\n    }\n\n    // passed an ember view or component\n    if (target.element) {\n      return Ember.$(target.element);\n    }\n\n    // passed an element directly\n    return Ember.$(target);\n  },\n\n  updateTargetAttachment() {\n    let targetAttachment = this.get('targetAttachment');\n    // Convert tether-styled values like 'middle right' to 'right'\n    targetAttachment = targetAttachment.split(' ').slice(-1)[0];\n    Ember.assert(\n      `Positioned container supports targetAttachments of ${SUPPORTED_TARGET_ATTACHMENTS.join(', ')}`,\n      SUPPORTED_TARGET_ATTACHMENTS.indexOf(targetAttachment) > -1\n    );\n    const targetAttachmentMethod = `align${capitalize(targetAttachment)}`;\n    const targetAttachmentElement = this.getWrappedTargetAttachmentElement();\n\n    this[targetAttachmentMethod](targetAttachmentElement);\n  },\n\n  alignCenter() {\n    const elementWidth = this.$().outerWidth();\n    const elementHeight = this.$().outerHeight();\n\n    this.$().css('left', '50%')\n      .css('top', '50%')\n      .css('margin-left', elementWidth * -0.5)\n      .css('margin-top', elementHeight * -0.5);\n  },\n\n  alignLeft(targetAttachmentElement) {\n    Ember.assert('Left targetAttachment requires a target', targetAttachmentElement.length > 0);\n\n    const elementWidth = this.$().outerWidth();\n    const originOffset = targetAttachmentElement.offset();\n    const originOffsetTop = originOffset.top - Ember.$(window).scrollTop();\n\n    this.$().css('left', originOffset.left - elementWidth)\n      .css('top', originOffsetTop);\n  },\n\n  alignRight(targetAttachmentElement) {\n    Ember.assert('Right targetAttachment requires a target', targetAttachmentElement.length > 0);\n\n    const targetWidth = targetAttachmentElement.outerWidth();\n    const originOffset = targetAttachmentElement.offset();\n    const originOffsetTop = originOffset.top - Ember.$(window).scrollTop();\n\n    this.$().css('left', originOffset.left + targetWidth)\n      .css('top', originOffsetTop);\n  },\n\n  alignTop(targetAttachmentElement) {\n    Ember.assert('Top targetAttachment requires a target', targetAttachmentElement.length > 0);\n\n    const elementWidth = this.$().outerWidth();\n    const elementHeight = this.$().outerHeight();\n    const originOffset = targetAttachmentElement.offset();\n    const originOffsetTop = originOffset.top - Ember.$(window).scrollTop();\n    const targetWidth = targetAttachmentElement.outerWidth();\n\n    this.$().css('left', (originOffset.left + targetWidth / 2 - elementWidth / 2))\n      .css('top', originOffsetTop - elementHeight);\n  },\n\n  alignBottom(targetAttachmentElement) {\n    Ember.assert('Bottom targetAttachment requires a target', targetAttachmentElement.length > 0);\n\n    const elementWidth = this.$().outerWidth();\n    const originOffset = targetAttachmentElement.offset();\n    const originOffsetTop = originOffset.top - Ember.$(window).scrollTop();\n    const targetWidth = targetAttachmentElement.outerWidth();\n    const targetHeight = targetAttachmentElement.outerHeight();\n\n    this.$().css('left', (originOffset.left + targetWidth / 2 - elementWidth / 2))\n      .css('top', originOffsetTop + targetHeight);\n  },\n\n  alignElementCenter(targetAttachmentElement) {\n    Ember.assert('ElementCenter targetAttachment requires a target', targetAttachmentElement.length > 0);\n\n    const elementWidth = this.$().outerWidth();\n    const originOffset = targetAttachmentElement.offset();\n    const originOffsetTop = originOffset.top - Ember.$(window).scrollTop();\n    const targetWidth = targetAttachmentElement.outerWidth();\n    const targetHeight = targetAttachmentElement.outerHeight();\n    const elementHeight = this.$().outerHeight();\n\n    this.$().css('left', (originOffset.left + targetWidth / 2 - elementWidth / 2))\n      .css('top', originOffsetTop + targetHeight / 2 - elementHeight / 2);\n  },\n\n  alignNone() {}\n});\n","/home/travis/build/npmtest/node-npmtest-ember-modal-dialog/node_modules/ember-modal-dialog/addon/components/tether-dialog.js":"import Ember from 'ember';\nimport ModalDialog from './modal-dialog';\nimport layout from '../templates/components/tether-dialog';\n\nconst { dasherize } = Ember.String;\nconst { computed, get } = Ember;\nconst isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);\n\nexport default ModalDialog.extend({\n  layout,\n\n  targetAttachmentClass: computed('targetAttachment', function() {\n    let targetAttachment = this.get('targetAttachment') || '';\n    return `ember-modal-dialog-target-attachment-${dasherize(targetAttachment)}`;\n  }),\n\n  targetAttachment: 'middle center',\n  attachment: 'middle center',\n  hasOverlay: true,\n  target: 'viewport', // element, css selector, view instance, 'viewport', or 'scroll-handle'\n\n  tetherClassPrefix: 'ember-tether',\n  // offset - passed in\n  // targetOffset - passed in\n  // targetModifier - passed in\n\n  makeOverlayClickableOnIOS: Ember.on('didInsertElement', function() {\n    if (isIOS && get(this, 'hasOverlay')) {\n      Ember.$('div[data-ember-modal-dialog-overlay]').css('cursor', 'pointer');\n    }\n  })\n\n});\n","/home/travis/build/npmtest/node-npmtest-ember-modal-dialog/node_modules/ember-modal-dialog/addon/initializers/add-modals-container.js":"/*globals document */\nlet hasDOM = typeof document !== 'undefined';\n\nfunction appendContainerElement(rootElementId, id) {\n  if (!hasDOM) {\n    return;\n  }\n\n  if (document.getElementById(id)) {\n    return;\n  }\n\n  let rootEl = document.querySelector(rootElementId);\n  let modalContainerEl = document.createElement('div');\n  modalContainerEl.id = id;\n  rootEl.appendChild(modalContainerEl);\n}\n\nexport default function() {\n  let application = arguments[1] || arguments[0];\n  let emberModalDialog = application.emberModalDialog || {};\n  let modalContainerElId = emberModalDialog.modalRootElementId || 'modal-overlays';\n\n  application.register('config:modals-container-id',\n                       modalContainerElId,\n                       { instantiate: false });\n\n  application.inject('service:modal-dialog',\n                     'destinationElementId',\n                     'config:modals-container-id');\n\n  appendContainerElement(application.rootElement, modalContainerElId);\n}\n","/home/travis/build/npmtest/node-npmtest-ember-modal-dialog/node_modules/ember-modal-dialog/app/components/ember-modal-dialog-positioned-container.js":"export { default } from 'ember-modal-dialog/components/positioned-container';\n"}